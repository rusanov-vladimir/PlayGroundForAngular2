import { Component, EventEmitter, Input, OnInit, OnDestroy, Output } from '@angular/core';
/*import { Hero } from './hero';*/
import {ContainersClient, Container, ContainerType} from "./../autogenerated"
import { ActivatedRoute } from '@angular/router';
import { ContainerService } from './../services/container.service';
import { SelectItem } from 'primeng/primeng';
import { ContainerTypeService } from './../services/container-type.service';


@Component({
    selector: 'container-detail',
    templateUrl: 'app/components/container-detail.component.html',
    styleUrls: ['app/components/container-detail.component.css']
})



export class ContainerDetailComponent implements OnInit, OnDestroy {
    @Input() container: Container;
    @Output() close = new EventEmitter();
    error: any;
    sub: any;
    navigated = false; // true if navigated here
    containerTypes: ContainerType[];

    constructor(
        private containerService: ContainerService,
        private route: ActivatedRoute,
        private containerTypeService: ContainerTypeService) {
        this.getContainerTypes();
    }

    ngOnInit() {
        this.sub = this.route.params.subscribe(params => {
            if (params['id'] !== undefined) {
                let id = +params['id'];
                this.navigated = true;
                this.containerService.getContainer(id)
                    .then(container =>
                        this.container = container
                    );
            } else {
                this.navigated = false;
                this.container = new Container();
            }
        });
    }

    ngOnDestroy() {
        this.sub.unsubscribe();
    }

    getContainerTypes() {
        this.containerTypes = [];
        this.containerTypeService.getContainerTypes().then(containerTypes => {
            this.containerTypes = containerTypes;
        });
    }

    goBack(savedContainer: Container = null) {
        this.close.emit(savedContainer);
        if (this.navigated) { window.history.back(); }
    }

    save() {
        this.containerService
            .save(this.container)
            .then(container => {
                this.container = container; // saved container, w/ id if new
                this.goBack(container);
            })
            .catch(error => this.error = error); // TODO: Display error message
    }
}