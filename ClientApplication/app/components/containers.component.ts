import { Component, OnInit, ElementRef } from '@angular/core';
/*import { Hero } from './hero';*/
import { Container, ContainerType} from "./../autogenerated"
import { ContainerDetailComponent } from './container-detail.component';
import { ContainerService } from './../services/container.service';
import { ContainerTypeService } from './../services/container-type.service';
import { Router } from '@angular/router';
import { LazyLoadEvent } from 'primeng/primeng';

@Component({
    selector: 'containers-list',
    templateUrl: 'app/components/containers.component.html',
    styleUrls: ['app/components/containers.component.css']
})


export class ContainersComponent implements OnInit {
    containers: Container[];
    selectedContainer: Container;
    error: any;
    addingContainer: any;
    titleStyle: any;
    classMap: any = 'classMap';
    totalRecords: number;
    containerTypes: ContainerType[];

    constructor(private containerService: ContainerService, private containerTypeService: ContainerTypeService,
        private router: Router, elementRef: ElementRef) {
        this.titleStyle = 'gray';
    }


    getContainers() {
        this.containerService.getContainers().then(containers => {
            this.containers = containers;
            this.totalRecords = containers.length;
        });
    }

    getContainerTypes() {
        this.containerTypes = [];
        this.containerTypeService.getContainerTypes().then(containerTypes => {
            this.containerTypes = containerTypes;
        });
    }

    ngOnInit() {
        this.getContainers();
        this.getContainerTypes();
    }

    gotoDetail() {
        let link = ['/detail', this.selectedContainer.id];
        this.router.navigate(link);
    }

    addContainer() {
        this.addingContainer = true;
        this.selectedContainer = null;
    }

    close(savedContainer: Container) {
        this.addingContainer = false;
        if (savedContainer) { this.getContainers(); }
    }

    deleteContainer(container: Container, event: any) {
        event.stopPropagation();
        this.containerService
            .delete(container)
            .then((res:any) => {
                this.containers = this.containers.filter(h => h !== container);
                if (this.selectedContainer === container) { this.selectedContainer = null; }
            })
            .catch((error:any) => this.error = error);
    }

    onSelect(container: Container) {
        this.selectedContainer = container;
        this.titleStyle = 'blue';
    }

    loadContainersLazy(event: LazyLoadEvent) {
        //move filtering and paging to server
        this.containerService.getContainers().then(containers => {
            var result = containers;

            if (event.filters && event.filters["id"] && event.filters["id"].value != "") {
                result = result.filter(
                    container => container.id.toString() === event.filters["id"].value
                )
            }

            if (event.filters && event.filters["name"] && event.filters["name"].value != "") {
                result = result.filter(
                    container => container.name.toString().indexOf(event.filters["name"].value) >= 0
                )
            }

            this.totalRecords = result.length;
            result = result.slice(event.first, (event.first + event.rows))
            
            this.containers = result;
        });
    }
}